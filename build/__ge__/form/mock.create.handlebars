'use strict';

const qs = require('qs');
const mockjs = require('mockjs');

// 数据持久
let {{namespace}}Data = {};
if (!global.{{namespace}}Data) {
  const data = mockjs.mock({
    'data|100': [
      {{{response}}}
    ],
    page: {
      total: 100,
      current: 1,
    },
    state: 0,
  });
  {{namespace}}Data = data;
  global.{{namespace}}Data = {{namespace}}Data;
} else {
  {{namespace}}Data = global.{{namespace}}Data;
}

module.exports = {

  'GET /api/{{apiPath}}' (req, res) {
    const page = qs.parse(req.query);
    const pageSize = page.pageSize || 10;
    const currentPage = page.page || 1;

    let data;
    let newPage;

    let newData = {{namespace}}Data.data.concat();

    if (page.field) {
      const d = newData.filter(function (item) {
        return item[page.field].indexOf(page.keyword) > -1;
      });

      data = d.slice((currentPage - 1) * pageSize, currentPage * pageSize);

      newPage = {
        current: currentPage * 1,
        total: d.length,
      };
    } else {
      data = {{namespace}}Data.data.slice((currentPage - 1) * pageSize, currentPage * pageSize);
      {{namespace}}Data.page.current = currentPage * 1;
      newPage = {
        current: {{namespace}}Data.page.current,
        total: {{namespace}}Data.page.total,
      };
    }

    res.set('per-page', pageSize);
    res.set('page-number', currentPage);
    res.set('total', {{namespace}}Data.page.total);

    setTimeout(function () {
      res.json({
        ...{{namespace}}Data,
        data,
        page: newPage,
      });
    }, 500);
  },

  'POST /api/{{apiPath}}' (req, res) {
    setTimeout(function () {
      const newData = JSON.parse(req.body);

      newData.id = {{namespace}}Data.data.length + 1;
      {{namespace}}Data.data.unshift(newData);

      {{namespace}}Data.page.total = {{namespace}}Data.data.length;
      {{namespace}}Data.page.current = 1;

      global.{{namespace}}Data = {{namespace}}Data;
      res.json({data: newData});
    }, 500);
  },

  'DELETE /api/{{apiPath}}/:id' (req, res) {
    setTimeout(function () {
      const deleteItem = {id:req.params.id};
      {{namespace}}Data.data = {{namespace}}Data.data.filter(function (item) {
        if (item.id == deleteItem.id) {
          return false;
        }
        return true;
      });

      {{namespace}}Data.page.total = {{namespace}}Data.data.length;

      global.{{namespace}}Data = {{namespace}}Data;
      res.json({
        success: true,
        data: {{namespace}}Data.data,
        page: {{namespace}}Data.page,
      });
    }, 500);
  },

  'PUT /api/{{apiPath}}/*' (req, res) {
    setTimeout(function () {
      const editItem = JSON.parse(req.body);
      let okItem = editItem;
      {{namespace}}Data.data = {{namespace}}Data.data.map(function (item) {
        if (item.id == editItem.id) {
          okItem = item;
          return editItem;
        }
        return item;
      });

      global.{{namespace}}Data = {{namespace}}Data;
      res.json({ data: okItem });
    }, 500);
  }

};
